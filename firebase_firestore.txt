1- installing
cloud_firestore 3.4.4
flutter pub add cloud_firestore

import 'package:cloud_firestore/cloud_firestore.dart';
-------------------------

2- Adding Documents in firebase firestore
https://firebase.flutter.dev/docs/firestore/usage/#adding-documents

 CollectionReference users = FirebaseFirestore.instance.collection('userSSS');

      users
          .doc(credential.user!.uid)
          .set({
            "imgLink":   urll     ,
            'username': usernameController.text,
            'age': ageController.text,
            "title": titleController.text,
            "email": emailController.text,
            "pass": passwordController.text,
          })
          .then((value) => print("User Added"))
          .catchError((error) => print("Failed to add user: $error"));
--------------------------------------------

3- Get data from firebase auth
#veriable get data of user from FirebaseAuth
  final credential = FirebaseAuth.instance.currentUser;
  "Email: ${credential!.email} ,
  "Created date:   ${DateFormat("MMMM d, y").format(credential!.metadata.creationTime!)}   ",
  "Last Signed In: ${DateFormat("MMMM d, y").format(credential!.metadata.lastSignInTime!)}  ",

--------------------------------------------------------------

4-  Get data from firebase firestore (Database)
https://firebase.flutter.dev/docs/firestore/usage/#read-data

###### One-time Read

## example
class GetUserName extends StatelessWidget {
  final String documentId;

  GetUserName(this.documentId);

  @override
  Widget build(BuildContext context) {
    CollectionReference users = FirebaseFirestore.instance.collection('users');

    return FutureBuilder<DocumentSnapshot>(
      future: users.doc(documentId).get(),
      builder:
          (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {

        if (snapshot.hasError) {
          return Text("Something went wrong");
        }

        if (snapshot.hasData && !snapshot.data!.exists) {
          return Text("Document does not exist");
        }

        if (snapshot.connectionState == ConnectionState.done) {
          Map<String, dynamic> data = snapshot.data!.data() as Map<String, dynamic>;
          return Text("Full Name: ${data['full_name']} ${data['last_name']}");
        }

        return Text("loading");
      },
    );
  }
}

## in the page when we use this class we muss add:
GetUserName(documentId: credential!.uid,),

###### Realtime changes

Stream collectionStream = FirebaseFirestore.instance.collection('users').snapshots();
Stream documentStream = FirebaseFirestore.instance.collection('users').doc('ABC123').snapshots();

# example
 class UserInformation extends StatefulWidget {
  @override
    _UserInformationState createState() => _UserInformationState();
}

class _UserInformationState extends State<UserInformation> {
  final Stream<QuerySnapshot> _usersStream = FirebaseFirestore.instance.collection('users').snapshots();

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<QuerySnapshot>(
      stream: _usersStream,
      builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
        if (snapshot.hasError) {
          return Text('Something went wrong');
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return Text("Loading");
        }

        return ListView(
          children: snapshot.data!.docs.map((DocumentSnapshot document) {
          Map<String, dynamic> data = document.data()! as Map<String, dynamic>;
            return ListTile(
              title: Text(data['full_name']),
              subtitle: Text(data['company']),
            );
          }).toList(),
        );
      },
    );
  }
}

# If you want to receive events when the document or query metadata changes:
FirebaseFirestore.instance
  .collection('users')
  .snapshots(includeMetadataChanges: true)

## QuerySnapshot
# A QuerySnapshot is returned from a collection query, and allows you to inspect the collection, such as how many documents exist within it, gives access to the documents within the collection, see any changes since the last query and more.

FirebaseFirestore.instance
    .collection('users')
    .get()
    .then((QuerySnapshot querySnapshot) {
        querySnapshot.docs.forEach((doc) {
            print(doc["first_name"]);
        });
    });
## DocumentSnapshot
# To determine whether the document exists, use the exists property:

FirebaseFirestore.instance
    .collection('users')
    .doc(userId)
    .get()
    .then((DocumentSnapshot documentSnapshot) {
      if (documentSnapshot.exists) {
        print('Document exists on the database');
      }
    });

# If the document exists, you can read the data of it by calling the data method,
 which returns a Map<String, dynamic>, or null if it does not exist:

 FirebaseFirestore.instance
    .collection('users')
    .doc(userId)
    .get()
    .then((DocumentSnapshot documentSnapshot) {
      if (documentSnapshot.exists) {
        print('Document data: ${documentSnapshot.data()}');
      } else {
        print('Document does not exist on the database');
      }
    });

# A DocumentSnapshot also provides the ability to access deeply nested data without manually
 iterating the returned Map via the get method. The method accepts a dot-separated path
  or a FieldPath instance. If no data exists at the nested path, a StateError:

  try {
  dynamic nested = snapshot.get(FieldPath(['address', 'postcode']));
} on StateError catch(e) {
  print('No nested field exists!');
}

##### Querying

### Filtering

## To filter documents within a collection, the where method can be chained onto a collection 
reference. Filtering supports equality checks and "in" queries. For example, to filter users
 where their age is greater than 20:

 FirebaseFirestore.instance
  .collection('users')
  .where('age', isGreaterThan: 20)
  .get()
  .then(...);

## Firestore also supports array queries. For example, to filter users who speak English (en)
or Italian (it), use the arrayContainsAny filter:

FirebaseFirestore.instance
  .collection('users')
  .where('language', arrayContainsAny: ['en', 'it'])
  .get()
  .then(...);

### Limiting
## To limit the number of documents returned from a query, use the limit method on
 a collection reference:

 FirebaseFirestore.instance
  .collection('users')
  .limit(2)
  .get()
  .then(...);

# You can also limit to the last documents within the collection 
query by using limitToLast:

FirebaseFirestore.instance
  .collection('users')
  .orderBy('age')
  .limitToLast(2)
  .get()
  .then(...);

## Ordering
To order the documents by a specific value, use the orderBy method:

FirebaseFirestore.instance
  .collection('users')
  .orderBy('age', descending: true)
  .get()
  .then(...);

## Start & End Cursors

To start and/or end a query at a specific point within a collection, you can pass a value 
to the startAt, endAt, startAfter or endBefore methods. You must specify an order to use 
cursor queries, for example:

FirebaseFirestore.instance
  .collection('users')
  .orderBy('age')
  .orderBy('company')
  .startAt([4, 'Alphabet Inc.'])
  .endAt([21, 'Google LLC'])
  .get()
  .then(...);

You can further specify a DocumentSnapshot instead of a specific value, by passing it to the
 startAfterDocument, startAtDocument, endAtDocument or endBeforeDocument methods. For example:

FirebaseFirestore.instance
  .collection('users')
  .orderBy('age')
  .startAfterDocument(documentSnapshot)
  .get()
  .then(...);

## Query Limitations

Cloud Firestore does not support the following types of queries:

Queries with range filters on different fields, as described in the previous section.
Logical OR queries. In this case, you should create a separate query for each OR condition
 and merge the query results in your app.
Queries with a != clause. In this case, you should split the query into a greater-than 
query and a less-than query. For example, the query clause where("age", isNotEqualTo: 30) 
is not supported, however you can get the same result set by combining two queries, one with
 the clause where("age", isLessThan: 30) and one with the clause where("age", isGreaterThan: 30)
------------------------------------------------------------------------------------------------------------------

5- update date in firestore (Database)

 CollectionReference users =  FirebaseFirestore.instance.collection('COLLECTION NAME');
  final credential = FirebaseAuth.instance.currentUser;

   users.doc(credential!.uid).update({"KEY": VALUE});

   If the data is an Array(List)
  //To add value  into a list
  await FirebaseFirestore.instance.collection("...").doc("...").update({"KEY": FieldValue.arrayUnion([VALUE])});
  
  //To remove from a list
  await FirebaseFirestore.instance.collection("...").doc("...").update({"KEY": FieldValue.arrayRemove([VALUE])});

--------------------------------------------------------------------------------------------------------------------------------

6-  Delete date & user

### Delete a field in document [firestore]
 CollectionReference users =  FirebaseFirestore.instance.collection('COLLECTION NAME');
  final credential = FirebaseAuth.instance.currentUser;

   users.doc(credential!.uid).update({"KEY": FieldValue.delete()});

#### Delete user [firebase auth]
   final credential = FirebaseAuth.instance.currentUser;

   credential!.delete();

#### Delete a document [firestore]
 CollectionReference users =  FirebaseFirestore.instance.collection('COLLECTION NAME');
  final credential = FirebaseAuth.instance.currentUser;

   users.doc(credential!.uid).delete();

---------------------------------
